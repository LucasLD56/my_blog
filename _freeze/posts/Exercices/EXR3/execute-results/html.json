{
  "hash": "fe6c33c0a7d55fcec5f5a0f4c9fb1895",
  "result": {
    "markdown": "---\ntitle: \"EX3R\"\nauthor: \"Lucas LE DREVO\"\nformat: html\neditor: visual\n---\n\n\n## Présentation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'stringr' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThe tzdb package is not installed. Timezones will not be available to Arrow compute functions.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'arrow'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:lubridate':\n\n    duration\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:utils':\n\n    timestamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(jsonlite)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'jsonlite' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(RSQLite)\n\n\n\n\nlibrary(arrow)\n\n# Lire le fichier .parquet\ntable <- arrow::read_parquet(\"C:/Users/lucas/OneDrive/Documents/RGH/tokyo_athletes.parquet\")\n\n# Dimensions de la table\ndimensions_table <- dim(table)\n\n# Colonnes présentes\ncolonnes <- colnames(table)\n\ncat(\"Dimensions de la table :\", dimensions_table[1], \" lignes,\", dimensions_table[2], \"colonnes\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDimensions de la table : 11085  lignes, 3 colonnes\n```\n:::\n\n```{.r .cell-code}\ncat(\"Colonnes présentes :\", paste(colonnes, collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColonnes présentes : Name, NOC, Discipline\n```\n:::\n:::\n\n\nLa table lue à partir du fichier .parquet a les caractéristiques suivantes :\n\n-   Dimensions de la table : 11085 lignes, 3 colonnes.\n\n-   Colonnes présentes : \"Name\", \"NOC\", \"Discipline\".\n\nCela signifie que la table contient 11085 entrées, chaque entrée ayant trois attributs (colonnes) : \"Name\" (nom), \"NOC\" (code du Comité National Olympique), et \"Discipline\" (discipline sportive).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jsonlite)\ndata <- fromJSON(\"C:/Users/lucas/OneDrive/Documents/RGH/olympics_athletes.json\")\n\n\n# Dimensions de la table\ndimensions_table <- dim(data)\n\n# Colonnes présentes\ncolonnes <- names(data)\n\ncat(\"Dimensions de la table :\", dimensions_table[1], \"lignes,\", dimensions_table[2], \"colonnes\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDimensions de la table : 269731 lignes, 13 colonnes\n```\n:::\n\n```{.r .cell-code}\ncat(\"Colonnes présentes :\", paste(colonnes, collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColonnes présentes : ID, Name, Sex, Age, Height, Weight, Team, NOC, Games, City, Sport, Event, Medal\n```\n:::\n:::\n\n\nLa table lue à partir du fichier .json a les caractéristiques suivantes :\n\n-   Dimensions de la table : 269731 lignes, 13 colonnes.\n\n-   Colonnes présentes : \"ID\", \"Name\", \"Sex\", \"Age\", \"Height\", \"Weight\", \"Team\", \"NOC\", \"Games\", \"City\", \"Sport\", \"Event\", \"Medal\".\n\nCela signifie que la table contient 269731 entrées, chaque entrée ayant treize attributs (colonnes) avec des informations sur les athlètes olympiques, y compris des détails tels que le nom, le sexe, l'âge, la taille, le poids, l'équipe, le pays, les jeux olympiques, la ville, le sport, l'événement et la médaille.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importer la librairie RSQLite\nlibrary(RSQLite)\n\n# Ouvrir une connexion à la base de données SQLite\n# Utilisez des barres obliques inversées doubles ou des barres obliques avant pour le chemin\nconnexion <- dbConnect(SQLite(), \"C:/Users/lucas/OneDrive/Documents/RGH/data.sqlite\")\n\n# Obtenir la liste des tables présentes dans la base de données\ntables <- dbListTables(connexion)\n\n# Afficher les tables présentes\ncat(\"Tables présentes dans la base de données :\", paste(tables, collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTables présentes dans la base de données : olympics_athletes, tokyo_athletes, tokyo_medals, tokyo_teams\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\n\n# Ouvrir une connexion à la base de données SQLite\nconnexion <- dbConnect(SQLite(), \"C:/Users/lucas/OneDrive/Documents/RGH/data.sqlite\")\n\n# Créer la table olympics_athletes à partir du fichier JSON\ndata_json <- fromJSON(\"C:/Users/lucas/OneDrive/Documents/RGH/olympics_athletes.json\")\ndbWriteTable(connexion, \"olympics_athletes\", data_json, overwrite = TRUE)\n\n# Créer la table tokyo_athletes à partir du fichier Parquet\nlibrary(arrow)\ndata_parquet <- arrow::read_parquet(\"C:/Users/lucas/OneDrive/Documents/RGH/tokyo_athletes.parquet\")\ndbWriteTable(connexion, \"tokyo_athletes\", data_parquet, overwrite = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sélectionner quelques lignes de la table olympics_athletes\nrequete_olympics <- \"SELECT * FROM olympics_athletes LIMIT 5\"\nresultats_olympics <- dbGetQuery(connexion, requete_olympics)\n\n# Sélectionner quelques lignes de la table tokyo_athletes\nrequete_tokyo <- \"SELECT * FROM tokyo_athletes LIMIT 5\"\nresultats_tokyo <- dbGetQuery(connexion, requete_tokyo)\n\n# Afficher les résultats\nprint(\"Quelques lignes de la table olympics_athletes :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Quelques lignes de la table olympics_athletes :\"\n```\n:::\n\n```{.r .cell-code}\nprint(resultats_olympics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID                     Name Sex Age Height Weight           Team NOC\n1  1                A Dijiang   M  24    180     80          China CHN\n2  2                 A Lamusi   M  23    170     60          China CHN\n3  3      Gunnar Nielsen Aaby   M  24     NA     NA        Denmark DEN\n4  4     Edgar Lindenau Aabye   M  34     NA     NA Denmark/Sweden DEN\n5  5 Christine Jacoba Aaftink   F  21    185     82    Netherlands NED\n        Games      City         Sport                            Event Medal\n1 1992 Summer Barcelona    Basketball      Basketball Men's Basketball  <NA>\n2 2012 Summer    London          Judo     Judo Men's Extra-Lightweight  <NA>\n3 1920 Summer Antwerpen      Football          Football Men's Football  <NA>\n4 1900 Summer     Paris    Tug-Of-War      Tug-Of-War Men's Tug-Of-War  Gold\n5 1988 Winter   Calgary Speed Skating Speed Skating Women's 500 metres  <NA>\n```\n:::\n\n```{.r .cell-code}\nprint(\"Quelques lignes de la table tokyo_athletes :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Quelques lignes de la table tokyo_athletes :\"\n```\n:::\n\n```{.r .cell-code}\nprint(resultats_tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               Name    NOC          Discipline\n1   AALERUD Katrine Norway        Cycling Road\n2       ABAD Nestor  Spain Artistic Gymnastics\n3 ABAGNALE Giovanni  Italy              Rowing\n4    ABALDE Alberto  Spain          Basketball\n5     ABALDE Tamara  Spain          Basketball\n```\n:::\n:::\n\n\nCréer des nouvelles tables et extraire quelques lignes de chaque table pour vérification\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspecter les colonnes de la table olympics_athletes\ncolonnes_olympics <- dbListFields(connexion, \"olympics_athletes\")\n\n# Afficher les colonnes\ncat(\"Colonnes de la table olympics_athletes :\", paste(colonnes_olympics, collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColonnes de la table olympics_athletes : ID, Name, Sex, Age, Height, Weight, Team, NOC, Games, City, Sport, Event, Medal\n```\n:::\n:::\n\n\nLes colonnes de la table \"olympics_athletes\" sont les suivantes :\n\n1.  ID\n\n2.  Name\n\n3.  Sex\n\n4.  Age\n\n5.  Height\n\n6.  Weight\n\n7.  Team\n\n8.  NOC\n\n9.  Games\n\n10. City\n\n11. Sport\n\n12. Event\n\n13. Medal\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importer la librairie RSQLite\nlibrary(RSQLite)\nlibrary(tibble)\n\n\n\n# Charger la table olympics_athletes depuis la base de données\ntable_olympics <- dbReadTable(connexion, \"olympics_athletes\")\n\n# Convertir la table en tibble\ntable_olympics_tibble <- as_tibble(table_olympics)\n\n# Afficher les premières lignes du tibble\nprint(table_olympics_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 269,731 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   <int> <chr>     <chr> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 1 more variable: Medal <chr>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importer les librairies nécessaires\nlibrary(dplyr)\n\n# Convertir la colonne Sex en variable catégorielle\ntable_olympics_tibble <- table_olympics_tibble %>%\n  mutate(Sex = as.factor(Sex))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importer les librairies nécessaires\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Créer les nouvelles colonnes à partir de la colonne Games\ntable_olympics_tibble <- table_olympics_tibble %>%\n  separate(\"Games\", into = c(\"Year\", \"Season\"), sep = \" \", convert = TRUE) %>%\n  mutate(isSummer = Season == \"Summer\")\n\n# Convertir la colonne Year en type integer\ntable_olympics_tibble$Year <- as.integer(table_olympics_tibble$Year)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importer les librairies nécessaires\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Supposons que votre tibble s'appelle table_olympics_tibble\n\nresultats_age_editions <- table_olympics_tibble %>%\n  group_by(Year) %>%\n  summarise(mean_age = mean(Age, na.rm = TRUE),\n            youngest_athlete = min(Age, na.rm = TRUE),\n            oldest_athlete = max(Age, na.rm = TRUE)) %>%\n  arrange(mean_age)\n\n# Afficher les résultats\nprint(resultats_age_editions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 35 × 4\n    Year mean_age youngest_athlete oldest_athlete\n   <int>    <dbl>            <int>          <int>\n 1  1896     23.6               10             40\n 2  1980     23.7               13             70\n 3  1976     23.8               12             70\n 4  1984     23.9               12             60\n 5  1988     24.1               11             70\n 6  1968     24.2               11             68\n 7  1972     24.3               12             69\n 8  1992     24.3               11             62\n 9  1994     24.4               13             46\n10  1996     24.9               12             63\n# ℹ 25 more rows\n```\n:::\n:::\n\n\n-   La tibble résultante contient les colonnes Year, mean_age (moyenne d'âge), youngest_athlete (âge du plus jeune athlète), et oldest_athlete (âge du plus vieux athlète).\n\n-   Les résultats sont triés par ordre croissant de la moyenne d'âge.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Supposons que votre tibble s'appelle table_olympics_tibble\n\nresultats_taille_max_femmes <- table_olympics_tibble %>%\n  filter(Sex == \"F\") %>%\n  group_by(Year, Sport) %>%\n  summarise(max_height = max(Height, na.rm = TRUE)) %>%\n  ungroup() %>%\n  group_by(Sport) %>%\n  summarise(total_max_height = sum(!is.na(max_height)),\n            years_max_height = list(Year[max_height == max(max_height, na.rm = TRUE)]))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There were 30 warnings in `summarise()`.\nThe first warning was:\nℹ In argument: `max_height = max(Height, na.rm = TRUE)`.\nℹ In group 1: `Year = 1900`, `Sport = \"Croquet\"`.\nCaused by warning in `max()`:\n! aucun argument pour max ; -Inf est renvoyé\nℹ Run `dplyr::last_dplyr_warnings()` to see the 29 remaining warnings.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# Trouver la discipline avec la taille maximale des athlètes féminines\ndiscipline_max_height <- resultats_taille_max_femmes %>%\n  filter(total_max_height == max(total_max_height, na.rm = TRUE))\n\n# Afficher la discipline\nprint(\"Discipline des JO d’été avec la taille maximale des athlètes féminines :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Discipline des JO d’été avec la taille maximale des athlètes féminines :\"\n```\n:::\n\n```{.r .cell-code}\nprint(discipline_max_height$Sport)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Diving\"         \"Figure Skating\" \"Swimming\"      \n```\n:::\n\n```{.r .cell-code}\n# Afficher le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes\nprint(\"Nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes :\"\n```\n:::\n\n```{.r .cell-code}\nprint(resultats_taille_max_femmes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53 × 3\n   Sport            total_max_height years_max_height\n   <chr>                       <int> <list>          \n 1 Alpine Skiing                  19 <int [1]>       \n 2 Alpinism                        1 <int [1]>       \n 3 Archery                        14 <int [2]>       \n 4 Art Competitions                6 <int [1]>       \n 5 Athletics                      21 <int [2]>       \n 6 Badminton                       7 <int [1]>       \n 7 Basketball                     11 <int [1]>       \n 8 Beach Volleyball                6 <int [2]>       \n 9 Biathlon                        7 <int [2]>       \n10 Bobsleigh                       4 <int [1]>       \n# ℹ 43 more rows\n```\n:::\n:::\n\n\nLa discipline des JO d'été dont la taille des athlètes féminines est la plus grande est \"Diving\" (plongeon), suivie de \"Figure Skating\" (patinage artistique) et \"Swimming\" (natation).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\n# Texte donné\ntexte <- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\nde Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n\n# Expression régulière pour capturer une date au format \"jour Mois année\"\nregex_date <- \"\\\\b\\\\d{1,2} [[:alpha:]]+ \\\\d{4}\\\\b\"\n\n# Utiliser str_extract_all pour extraire toutes les occurrences de dates\ndates_extracted <- str_extract_all(texte, regex_date)[[1]]\n\n# Afficher les dates extraites\nprint(dates_extracted)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n```\n:::\n:::\n\n\nLes dates extraites du texte sont les suivantes :\n\n-   \"5 Août 2016\"\n\n-   \"20 Août 2016\"\n\n-   \"23 Juillet 2021\"\n\n-   \"8 Août 2021\"\n\n-   \"26 Juillet 2024\"\n\n-   \"11 Août 2024\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\n# Texte donné\ntexte <- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\nde Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n\n# Expression régulière pour capturer une date au format \"jour Mois année\"\nregex_date <- \"\\\\b\\\\d{1,2} [[:alpha:]]+ \\\\d{4}\\\\b\"\n\n# Utiliser str_extract_all pour extraire toutes les occurrences de dates\ndates_extracted <- str_extract_all(texte, regex_date)[[1]]\n\n# Remplacer les noms des mois par leur numéro\nmois_numeros <- c(\"Janvier\" = \"01\", \"Février\" = \"02\", \"Mars\" = \"03\", \"Avril\" = \"04\",\n                  \"Mai\" = \"05\", \"Juin\" = \"06\", \"Juillet\" = \"07\", \"Août\" = \"08\",\n                  \"Septembre\" = \"09\", \"Octobre\" = \"10\", \"Novembre\" = \"11\", \"Décembre\" = \"12\")\n\nfor (mois in names(mois_numeros)) {\n  texte <- str_replace_all(texte, mois, mois_numeros[mois])\n}\n\n# Afficher le texte modifié\nprint(texte)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\\nde 07 et 08. Les jeux de Rio ont eu lieu du 5 08 2016 au 20 08 2016,\\nceux de Tokyo du 23 07 2021 au 8 08 2021, et ceux de Paris auront lieu du\\n26 07 2024 au 11 08 2024. Plus de 10000 athlètes sont attendus du monde\\nentier à Paris.\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\n# Dates extraites\ndates_extracted <- c(\"5 Août 2016\", \"20 Août 2016\", \"23 Juillet 2021\", \"8 Août 2021\", \"26 Juillet 2024\", \"11 Août 2024\")\n\n# Convertir les dates en utilisant lubridate\ndates_converties <- dmy(dates_extracted)\n\n# Afficher les dates converties\nprint(dates_converties)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dates des éditions\ndate_rio <- dmy(\"5 Août 2016\")\ndate_tokyo <- dmy(\"23 Juillet 2021\")\ndate_paris <- dmy(\"26 Juillet 2024\")\n\n# Calcul du nombre de jours\njours_rio_tokyo <- as.numeric(difftime(date_tokyo, date_rio, units = \"days\"))\njours_tokyo_paris <- as.numeric(difftime(date_paris, date_tokyo, units = \"days\"))\n\n# Calcul du nombre de semaines\nsemaines_rio_tokyo <- as.numeric(difftime(date_tokyo, date_rio, units = \"weeks\"))\nsemaines_tokyo_paris <- as.numeric(difftime(date_paris, date_tokyo, units = \"weeks\"))\n\n# Affichage des résultats\ncat(\"Nombre de jours entre Rio et Tokyo:\", jours_rio_tokyo, \"jours\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de jours entre Rio et Tokyo: 1813 jours\n```\n:::\n\n```{.r .cell-code}\ncat(\"Nombre de jours entre Tokyo et Paris:\", jours_tokyo_paris, \"jours\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de jours entre Tokyo et Paris: 1099 jours\n```\n:::\n\n```{.r .cell-code}\ncat(\"Nombre de semaines entre Rio et Tokyo:\", semaines_rio_tokyo, \"semaines\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de semaines entre Rio et Tokyo: 259 semaines\n```\n:::\n\n```{.r .cell-code}\ncat(\"Nombre de semaines entre Tokyo et Paris:\", semaines_tokyo_paris, \"semaines\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de semaines entre Tokyo et Paris: 157 semaines\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}